#separator:tab
#html:false
#deck column:1
1-42cursus::02-Born2beroot2.0	001/ üñ•Ô∏è What is Virtualization? Which of the following best describes virtualization? A) Running multiple applications on one OS B) Creating virtual versions of physical resources C) Using a hypervisor to share files D) Emulating physical hardware without an OS	Answer: B  Explanation: Virtualization is the process of creating virtual versions of physical resources like servers, storage, or networks. üß† Mnemonic: 'Virtualize to optimize, resource-wise!'
1-42cursus::02-Born2beroot2.0	002/ ‚öôÔ∏è Type 1 Hypervisor Which of the following is a Type 1 (Bare-Metal) Hypervisor? A) VMware Workstation B) VMware vSphere/ESXi C) Oracle VirtualBox D) Parallels Desktop	Answer: B  Explanation: Type 1 Hypervisors run directly on hardware, improving performance. Examples include VMware ESXi. ‚ùå Options A, C, and D are Type 2 Hypervisors, which run on a host OS.  Tip: 'Bare-Metal = No OS in the middle.'
1-42cursus::02-Born2beroot2.0	003/ üìä Server Virtualization Benefits What is the primary benefit of server virtualization? A) Improved physical server cooling B) Increased resource isolation C) Reduced hardware costs and improved efficiency D) Faster network speeds	Answer: C  Explanation: Server virtualization splits a single server into multiple virtual servers, reducing hardware costs and improving efficiency. üß† Mnemonic: 'Virtual Servers Save (VSS) Cost & Space.'
1-42cursus::02-Born2beroot2.0	004/ üõ†Ô∏è Hypervisor Types What differentiates a Type 2 Hypervisor from a Type 1 Hypervisor? A) Type 2 runs directly on hardware B) Type 2 runs on top of a host OS C) Type 2 cannot create virtual machines D) Type 2 does not provide isolation	Answer: B  Explanation: A Type 2 Hypervisor runs on top of a host operating system, unlike Type 1, which runs directly on hardware. ‚ùå Option A: Incorrect, describes Type 1. ‚ùå Option D: Type 2 still provides isolation. Example: VirtualBox runs on Windows/Linux.
1-42cursus::02-Born2beroot2.0	005/ üîß Resource Management How does a hypervisor allocate resources to virtual machines (VMs)? A) Randomly distributes resources B) Manages CPU, memory, and storage allocation C) Splits all resources equally D) Uses a single resource pool for all VMs	Answer: B  Explanation: Hypervisors allocate CPU, memory, and storage to VMs, ensuring resource management and isolation. üß† Mnemonic: 'Allocate and Isolate to Operate.'
1-42cursus::02-Born2beroot2.0	006/ ‚ö° Performance Impact Why does a Type 1 Hypervisor have better performance than a Type 2 Hypervisor? A) It runs fewer VMs B) It runs directly on hardware, bypassing the host OS overhead C) It uses fewer CPU cores D) It optimizes storage devices only	Answer: B  Explanation: Type 1 Hypervisors run directly on hardware, eliminating the performance overhead of a host OS. ‚ùå Options A, C, and D are irrelevant.
1-42cursus::02-Born2beroot2.0	007/ üóÑÔ∏è Storage Virtualization Which of the following is true about storage virtualization? A) It combines multiple storage devices into one virtual unit B) It creates multiple virtual servers C) It only works on SSDs D) It requires desktop virtualization	Answer: A  Explanation: Storage virtualization combines multiple storage devices into one logical unit, simplifying management. Example: RAID configurations aggregate disks for better efficiency.
1-42cursus::02-Born2beroot2.0	008/ üîí Isolation with Hypervisors What happens if one virtual machine (VM) crashes under a hypervisor? A) The hypervisor crashes too B) Other VMs remain unaffected C) The host OS also crashes D) All virtual networks fail	Answer: B  Explanation: Hypervisors ensure isolation between VMs, so if one crashes, others are unaffected. ‚ùå Option A: Hypervisors are robust. ‚ùå Option C: Applies only to Type 2 failures.
1-42cursus::02-Born2beroot2.0	009/ üåê Network Virtualization What is the purpose of network virtualization? A) To increase storage speeds B) To emulate virtual networks for better flexibility and control C) To provide desktop environments D) To replace server virtualization	Answer: B  Explanation: Network virtualization emulates networks, improving flexibility, control, and security. üß† Mnemonic: 'Virtualize Networks for Flexibility & Control.'
1-42cursus::02-Born2beroot2.0	010/ ‚öôÔ∏è Hypervisor Emulation How does a hypervisor emulate hardware for virtual machines? A) By modifying the physical hardware B) By creating virtual devices (e.g., NICs, disks) C) By directly controlling the hardware with no changes D) By sharing hardware without isolation	Answer: B  Explanation: Hypervisors emulate hardware components like virtual NICs (network cards) and disks, allowing VMs to function independently. ‚ùå Option A: Physical hardware is not modified.
1-42cursus::02-Born2beroot2.0	101/ üöÄ What is the first step in the Linux boot process? A) Kernel Initialization B) BIOS Power-On Self Test C) GRUB Bootloader D) Master Boot Record (MBR)	Answer: B  Explanation: The first step is the BIOS Power-On Self Test (POST), which verifies basic hardware functionality like RAM and hard drives. üß† Mnemonic: **B**IOS comes **B**efore everything else!
1-42cursus::02-Born2beroot2.0	102/ üõ†Ô∏è Where does the BIOS firmware reside during the Linux boot process? A) RAM B) SSD C) ROM D) Hard Drive	Answer: C  Explanation: BIOS resides in ROM (Read-Only Memory) on the motherboard, independent of the operating system. üß† Mnemonic: 'BIOS is **R**ead **O**nly **M**agic!'
1-42cursus::02-Born2beroot2.0	103/ üîç What happens if the BIOS does not find a valid MBR in the boot devices? A) The system halts B) It skips to the next boot device C) It directly loads the kernel D) It reboots automatically	Answer: B  Explanation: BIOS checks boot devices in order for an MBR. If none is found, it moves to the next device. üß† Mnemonic: 'Skip and search, don't panic!'
1-42cursus::02-Born2beroot2.0	104/ üì¶ Where is the Master Boot Record (MBR) located? A) Second sector of the drive B) Last sector of the drive C) First sector of the drive D) BIOS ROM	Answer: C  Explanation: The MBR is located in the first sector of the drive and is only 512 bytes in size. üß† Mnemonic: 'First sector, first step!'
1-42cursus::02-Born2beroot2.0	105/ üß∞ Which bootloader replaced LILO as the default Linux bootloader? A) LILO B) U-Boot C) GRUB D) Systemd-Boot	Answer: C  Explanation: GRUB (Grand Unified Bootloader) replaced LILO because it supports multiple operating systems and offers advanced features like dual-boot menus. üß† Mnemonic: 'LILO left, GRUB grabbed the spotlight!'
1-42cursus::02-Born2beroot2.0	106/ üîë What is the main purpose of GRUB in the Linux boot process? A) To load the BIOS B) To load the kernel into memory C) To test hardware D) To initialize drivers	Answer: B  Explanation: GRUB loads the Linux kernel into memory, preparing for kernel initialization. üß† Mnemonic: 'GRUB gets the kernel going!'
1-42cursus::02-Born2beroot2.0	107/ ‚öôÔ∏è What is the difference between GRUB and LILO? A) GRUB supports multiple OS, LILO does not B) LILO is modern; GRUB is outdated C) LILO supports RAM; GRUB does not D) GRUB uses BIOS, LILO does not	Answer: A  Explanation: GRUB supports booting multiple operating systems like Linux and Windows, whereas LILO can only boot Linux. üß† Tip: Remember **GRUB** = **G**ets **R**eal **U**sers **B**ooted!
1-42cursus::02-Born2beroot2.0	108/ üìÄ How does BIOS determine the boot device order? A) It uses the latest installed device B) It follows the boot menu priority list C) It randomly selects devices D) It always boots from the hard drive	Answer: B  Explanation: BIOS follows the boot device order set in the boot menu, checking for the presence of an MBR. üß† Mnemonic: 'Top of the list gets first shot!'
1-42cursus::02-Born2beroot2.0	109/ üß† What happens when the Linux kernel initializes? A) It shuts down the system B) It loads hardware drivers and mounts the root filesystem C) It starts the BIOS POST D) It launches the GRUB menu	Answer: B  Explanation: Kernel initialization loads essential hardware drivers and mounts the root filesystem to start the Linux system. üß† Mnemonic: 'Kernel kicks hardware into gear!'
1-42cursus::02-Born2beroot2.0	110/ üõë Why is the MBR size limited to only 512 bytes? A) It was a hardware design limit B) It‚Äôs reserved for bootloader and partition info only C) It improves boot speed D) It cannot store more data due to ROM restrictions	Answer: B  Explanation: The MBR is limited to 512 bytes because it only stores the bootloader and partition table, keeping the structure simple and efficient. üß† Tip: 'MBR = Minimal Boot Record!'
1-42cursus::02-Born2beroot2.0	101/ üîå What is the first step of the boot process? A) Loading GRUB B) Running BIOS/UEFI C) Executing systemd D) Loading Linux Kernel	Answer: B  Explanation: The boot process begins when BIOS/UEFI firmware loads from the motherboard memory. üß† Mnemonic: '**B**oot = **B**IOS first!'
1-42cursus::02-Born2beroot2.0	102/ üõ† What does POST (Power-On Self Test) check? A) CPU and RAM B) Linux Kernel C) User permissions D) Bootloader settings	Answer: A  Explanation: POST checks essential hardware components like CPU and RAM to ensure they function correctly. üîç Beep codes indicate failures.
1-42cursus::02-Born2beroot2.0	103/ üß≠ If GRUB fails to load, what error will you likely see? A) Kernel Panic B) No bootable device found C) Permission Denied D) Missing .bashrc	Answer: B  Explanation: GRUB failing prevents the bootloader from locating the OS, leading to '**No bootable device found**' errors. üí° Fix: Repair or reinstall GRUB.
1-42cursus::02-Born2beroot2.0	104/ ‚öôÔ∏è What is the role of the Linux Kernel during the boot process? A) Executes systemd B) Detects boot devices C) Initializes hardware drivers D) Both A and C	Answer: D  Explanation: The Kernel initializes hardware and runs the first user-space process (systemd). üí° '**Kernel = Core** functions + User space launch.'
1-42cursus::02-Born2beroot2.0	105/ üöÄ How can you select a boot device manually in BIOS/UEFI? A) Edit systemd targets B) Change boot order C) Restart systemd D) Modify .bashrc	Answer: B  Explanation: Boot order settings in BIOS/UEFI determine the device priority for booting. üîë Tip: Access BIOS by pressing keys like DEL or F12 during startup.
1-42cursus::02-Born2beroot2.0	106/ üìã What file does GRUB use to load its configuration? A) /etc/systemd.conf B) /etc/grub2.cfg C) /boot/kernel.cfg D) /etc/default/boot	Answer: B  Explanation: GRUB uses **/etc/grub2.cfg** to load its configuration. üß† Mnemonic: '**GRUB's 2nd file** = /grub2.cfg'.
1-42cursus::02-Born2beroot2.0	107/ üß© What happens if systemd fails to execute? A) The Kernel restarts automatically B) Kernel Panic occurs C) BIOS reboots D) GRUB reloads	Answer: B  Explanation: If systemd fails, the system cannot reach user space, causing a **Kernel Panic**. üí° Tip: Use **rescue mode** for diagnostics.
1-42cursus::02-Born2beroot2.0	108/ üñ•Ô∏è What target does systemd load for GUI mode? A) multi-user.target B) graphical.target C) init.target D) tty.target	Answer: B  Explanation: **graphical.target** brings up the GUI. üí° Tip: Use `systemctl set-default graphical.target` to set GUI as default.
1-42cursus::02-Born2beroot2.0	109/ üîç Why is POST critical in the boot process? A) It checks software drivers B) It ensures hardware is functional C) It loads the Kernel D) It runs init scripts	Answer: B  Explanation: POST verifies that CPU, RAM, and peripherals are functional before proceeding. üîç Without POST, hardware faults would go undetected.
1-42cursus::02-Born2beroot2.0	110/ üö™ If no bootable device is found, what message will display? A) Kernel Panic B) No bootable device found C) GRUB Error 404 D) systemd failed to start	Answer: B  Explanation: If BIOS/UEFI cannot locate a bootable device, the system displays '**No bootable device found**'. üõ† Fix: Check boot order or connected drives.
1-42cursus::02-Born2beroot2.0	201/ üîß What are the two stages of GRUB in the boot process?	Answer: Stage 1 and Stage 2  Explanation:Stage 1: Loads the minimal GRUB loader into memory.Stage 2: Loads the GRUB menu to select the kernel to boot.üõ† GRUB ensures the kernel is properly loaded into memory.
1-42cursus::02-Born2beroot2.0	202/ ‚öôÔ∏è How does the kernel take control after the bootloader hands over?	Answer: The bootloader loads the kernel into memory and passes control.  Explanation: The kernel initializes essential components like CPU, memory, and hardware before mounting the root filesystem.
1-42cursus::02-Born2beroot2.0	203/ üõ† What is the purpose of initrd (initial RAM disk)?	Answer: To load essential drivers before the root filesystem is mounted.  Explanation:Initrd acts as a temporary filesystem in memory.It contains modules for storage or network drivers needed during early boot stages.
1-42cursus::02-Born2beroot2.0	204/ üìÅ What is the default systemd target for a multi-user text-based system?	Answer: multi-user.target  Explanation: This target is equivalent to runlevel 3 in SysV init systems. It boots into a text-based multi-user mode without GUI.
1-42cursus::02-Born2beroot2.0	205/ ‚ö° What role does the BIOS play in the Linux boot process?	Answer: BIOS initializes hardware, POST, and locates the bootloader.  Explanation:POST checks hardware components like CPU and RAM.BIOS locates the bootloader in the Master Boot Record (MBR).
1-42cursus::02-Born2beroot2.0	206/ üõ† Where is GRUB's main configuration file located?	Answer: /boot/grub/grub.cfg or /etc/grub.d  Explanation: GRUB uses these files to manage boot options and kernel parameters. Avoid manual edits to grub.cfg; use grub-mkconfig instead.
1-42cursus::02-Born2beroot2.0	207/ ‚ö†Ô∏è What happens if the kernel fails to mount the root filesystem?	Answer: The kernel panics.  Explanation:Error like Kernel Panic: VFS: Unable to mount root fs appears.It halts the system as no root filesystem can be loaded.
1-42cursus::02-Born2beroot2.0	208/ üß© What is the Process ID (PID) of the systemd process?	Answer: PID 1  Explanation: systemd is the first process started by the kernel and serves as the init system to manage all subsequent processes.
1-42cursus::02-Born2beroot2.0	209/ üöÄ What are the main steps of the Linux boot process?	Answer: BIOS ‚Üí Bootloader (GRUB) ‚Üí Kernel ‚Üí Initrd ‚Üí Systemd ‚Üí Target/Runlevel ‚Üí Shell/GUI  Explanation: Each step plays a crucial role in starting up the Linux operating system.
1-42cursus::02-Born2beroot2.0	210/ üîÑ How are SysV runlevels mapped to systemd targets?	Answer:Runlevel 0 ‚Üí poweroff.targetRunlevel 1 ‚Üí rescue.targetRunlevel 3 ‚Üí multi-user.targetRunlevel 5 ‚Üí graphical.targetRunlevel 6 ‚Üí reboot.target Explanation: Systemd replaces traditional runlevels with more flexible targets.
1-42cursus::02-Born2beroot2.0	001/ üß© What is the role of **System Calls** in the Linux Kernel? A) Direct access to hardware B) Interface for Apps to request OS services C) File system management D) Scheduling processes	Answer: B  Explanation: System Calls act as a bridge between user-level applications and the Kernel, allowing apps to perform tasks like file I/O, memory allocation, or networking. üß† Mnemonic: 'Apps Call Sys for Help' (System Calls).
1-42cursus::02-Born2beroot2.0	002/ üóÑÔ∏è **VFS (Virtual File System)** provides: A) Abstraction for network communication B) Hardware-level file management C) Uniform interface for various file systems D) Memory management abstraction	Answer: C  Explanation: VFS abstracts the differences between file systems like ext4, FAT32, and NTFS, providing a uniform file interface. ‚ùå A) Relates to networking. ‚ùå B) Handled by Raw Device Access. ‚ùå D) Related to Virtual Memory. üß† Mnemonic: 'One Interface, Many File Systems.'
1-42cursus::02-Born2beroot2.0	003/ ‚öôÔ∏è What happens if the **Scheduler** is missing from the Kernel? A) Processes won't execute efficiently B) File systems will fail C) Hardware can't communicate D) System calls will stop working	Answer: A  Explanation: The Scheduler manages CPU time for processes. Without it, processes wouldn't run efficiently, leading to CPU underutilization. üß† Mnemonic: 'No Scheduler = No Order in CPU Time.'
1-42cursus::02-Born2beroot2.0	004/ üõ†Ô∏è **Device Drivers** are essential for: A) Managing network protocols B) Direct communication with hardware C) File abstraction D) Scheduling processes	Answer: B  Explanation: Device Drivers translate OS commands into hardware actions, enabling interaction with devices like HDD or network cards. üß† Mnemonic: 'Drivers Drive Hardware.'
1-42cursus::02-Born2beroot2.0	005/ üåê How does the **TCP/IP** subsystem contribute to networking? A) Manages physical data transfers B) Provides reliable packet transmission C) Abstracts file system access D) Executes processes on the CPU	Answer: B  Explanation: TCP/IP ensures reliable delivery of data packets over a network. ‚ùå A) Ethernet handles physical transfers. üß† Mnemonic: 'TCP/IP = Trusted Communication Protocol.'
1-42cursus::02-Born2beroot2.0	006/ üìä What role does **Virtual Memory** play in Linux? A) Extends available memory using swap B) Abstracts file system operations C) Provides low-level hardware access D) Schedules processes efficiently	Answer: A  Explanation: Virtual Memory uses swap space to provide applications with more memory than physically available. üß† Mnemonic: 'Virtual Memory: RAM + Swap Magic.'
1-42cursus::02-Born2beroot2.0	007/ üîå What happens without **Raw Device Access (RDE)**? A) Hardware initialization will fail B) File systems won't work C) Apps can't make system calls D) Virtual memory can't function	Answer: A  Explanation: RDE enables low-level communication with hardware. Without it, the OS cannot initialize or access storage devices. üß† Mnemonic: 'Raw Access = Real Hardware Talk.'
1-42cursus::02-Born2beroot2.0	008/ üíæ What purpose does the **File System** serve in Linux? A) Abstracts hardware communication B) Organizes and manages data storage C) Provides virtual memory abstraction D) Manages CPU process execution	Answer: B  Explanation: The File System manages file read/write operations, metadata, and organizes data storage on disks. üß† Mnemonic: 'File System: Organize, Store, Retrieve.'
1-42cursus::02-Born2beroot2.0	009/ üîí What interface allows processes to **communicate over a network**? A) VFS B) Sockets C) Scheduler D) Volume Manager	Answer: B  Explanation: Sockets provide endpoints for network communication, enabling data transfer between processes. üß† Mnemonic: 'Sockets Send Signals Safely.'
1-42cursus::02-Born2beroot2.0	010/ üñ•Ô∏è If **System Utilities** like `ls` or `top` are missing, what impact would it have? A) Kernel stops functioning B) No tools for system monitoring or file management C) System calls will fail D) Hardware communication breaks down	Answer: B  Explanation: System Utilities like `ls` and `top` provide essential tools for monitoring, controlling, and managing the system. üß† Mnemonic: 'No Sys Tools = No Control.'
1-42cursus::02-Born2beroot2.0	"201/ üß© What is the purpose of the **Virtual File System (VFS)** in Linux? open(\/home/user/file.txt\"", O_RDONLY);What does VFS abstract for file operations? A) It translates system calls into device-specific operations B) It bypasses hardware drivers C) It only works for ext4 file systems D) It handles TCP/IP routing"""	Answer: A  Explanation: VFS abstracts the differences between file systems (ext4, NTFS, etc.), providing a uniform interface for operations like `open`, `read`, and `write`. It translates system calls into file-system-specific operations. üß† Mnemonic: 'VFS = Virtual File Bridge'‚Äîbridging all file systems uniformly.  Other options: B) Incorrect: Hardware drivers are managed by Device Drivers (DD). C) Incorrect: VFS works for multiple file systems, not just ext4. D) Incorrect: TCP/IP routing is handled by the network stack.
1-42cursus::02-Born2beroot2.0	202/ üîß Role of **Schedulers** in Linux Kernel How does the scheduler decide which process runs on the CPU? A) First-come, first-served only B) Based on process priority and time slices C) By file size D) Random selection	Answer: B  Explanation: Schedulers decide process execution using priorities and time slices (fairness-based scheduling). Example: The Completely Fair Scheduler (CFS) allocates CPU time proportionally. üß† Mnemonic: 'Priority first, Time shared next!'  Other options: A) Incorrect: It's not limited to first-come, first-served. C) Incorrect: File size isn't relevant for CPU scheduling. D) Incorrect: Random selection isn‚Äôt efficient.
1-42cursus::02-Born2beroot2.0	203/ üö® Why is **Virtual Memory** critical for large applications? Consider the following scenario: int *arr = malloc(10 * 1024 * 1024);What happens if physical memory is insufficient? A) App will crash immediately B) Virtual memory uses swap space C) Kernel reduces CPU speed D) The OS allocates memory from the network	Answer: B  Explanation: Virtual memory uses swap space (disk) to simulate more memory when physical RAM is insufficient. üß† Mnemonic: 'Virtual is invisible but swap saves the day.'  Other options: A) Incorrect: Virtual memory prevents immediate crashes. C) Incorrect: CPU speed isn't reduced due to memory issues. D) Incorrect: Memory isn‚Äôt allocated from the network.
1-42cursus::02-Born2beroot2.0	204/ üõ† **Raw Device Access (RDE)** allows direct interaction with hardware. Which of the following is an advantage of RDE? A) Provides low-level access for performance optimization B) It hides hardware details completely C) Uses TCP/IP for storage access D) Only works with virtual machines	Answer: A  Explanation: RDE allows performance-critical applications (e.g., databases) to directly access devices like HDDs without abstraction layers. üß† Tip: 'Raw is Fast!'‚ÄîDirect access means fewer layers and faster I/O.  Other options: B) Incorrect: RDE exposes hardware details. C) Incorrect: TCP/IP is unrelated to storage access. D) Incorrect: RDE works on physical devices, not just VMs.
1-42cursus::02-Born2beroot2.0	205/ üñ• **Device Drivers (DD)**: What‚Äôs their role in Linux Kernel? Consider the following operation: write(fd, buffer, size);How do Device Drivers help? A) Translate system calls to hardware instructions B) Manage virtual memory directly C) Perform scheduling for processes D) Handle network packets only	Answer: A  Explanation: Device Drivers bridge the OS and hardware by translating system calls (e.g., `write`) into hardware actions. üß† Mnemonic: 'Drivers drive hardware!'  Other options: B) Incorrect: Virtual memory is handled by the kernel's memory manager. C) Incorrect: Process scheduling is managed by the Scheduler. D) Incorrect: Network packets are handled by the Sockets and TCP/IP subsystems.
1-42cursus::02-Born2beroot2.0	206/ üõ°Ô∏è What happens if **Sockets** are missing in the Kernel? Which of the following would fail? A) File read/write B) Network communication C) Virtual memory allocation D) CPU scheduling	Answer: B  Explanation: Sockets allow network communication between processes and systems. Without them, sending/receiving data (e.g., via TCP/IP) becomes impossible. üß† Tip: 'No Sockets = No Network.'  Other options: A) Incorrect: File operations are handled by VFS. C) Incorrect: Virtual memory is managed independently. D) Incorrect: CPU scheduling is unrelated to sockets.
1-42cursus::02-Born2beroot2.0	207/ üìä What is the **TCP/IP** stack‚Äôs role in the Linux Kernel? A) Enables direct hardware access B) Provides reliable network communication C) Organizes file storage D) Manages CPU priorities	Answer: B  Explanation: TCP/IP ensures reliable communication over the network by managing data transmission and receipt. üß† Tip: 'TCP/IP = Transfer Complete & Precise.'  Other options: A) Incorrect: Direct hardware access is via RDE. C) Incorrect: File storage is handled by File Systems. D) Incorrect: CPU priorities are managed by the Scheduler.
1-42cursus::02-Born2beroot2.0	208/ ‚ö° **Ethernet Layer** in Linux Kernel: What‚Äôs its primary role? Choose the correct statement: A) Manages IP packet routing B) Provides physical layer connectivity C) Allocates memory dynamically D) Schedules processes for execution	Answer: B  Explanation: Ethernet ensures physical layer connectivity, enabling packet transfer over wired/wireless networks. üß† Mnemonic: 'Ethernet = Entry to Networks.'  Other options: A) Incorrect: IP routing is handled by the IP layer. C) Incorrect: Memory allocation is managed by Virtual Memory. D) Incorrect: Process scheduling is unrelated to Ethernet.
1-42cursus::02-Born2beroot2.0	209/ üîé What does **System Calls** bridge in Linux? Which of these is true about System Calls? A) They connect applications with hardware B) They allocate IP addresses C) They provide direct file access to apps D) They bypass the kernel for performance	Answer: A  Explanation: System Calls act as the bridge between user-level applications and the Kernel, allowing apps to interact with hardware. üß† Mnemonic: 'System Calls = Speak to Kernel.'  Other options: B) Incorrect: IP addressing is handled by TCP/IP. C) Incorrect: File access is abstracted via VFS. D) Incorrect: System Calls rely on the Kernel for security and stability.
1-42cursus::02-Born2beroot2.0	210/ üöÄ **Volume Manager**: What would happen if it didn‚Äôt exist? A) Disk partitions couldn‚Äôt be managed B) CPU scheduling would fail C) File system operations would stop D) Network communication would break	Answer: A  Explanation: Volume Managers allow creating, resizing, and managing disk partitions. Without them, dynamic disk management becomes impossible. üß† Tip: 'No Volume Manager = No Partition Control.'  Other options: B) Incorrect: CPU scheduling is unrelated. C) Incorrect: File system operations depend on VFS and File Systems. D) Incorrect: Network communication relies on Sockets and TCP/IP.
1-42cursus::02-Born2beroot2.0	101/ üöÄ What is the size and structure of the MBR? struct MBR {     char bootloader[446]; // Bootloader code     char partition_table[64]; // Partition info     char boot_signature[2]; // 0x55AA };Which part ensures the MBR is valid? A) Partition Table B) Boot Signature C) Bootloader Code D) Sector Offset	Answer: B  Explanation: The Boot Signature (0x55AA) at the end of the MBR ensures it is valid. It serves as a marker for BIOS.  üß† Mnemonic: '55AA = Boot's final HURRAH!'  Other options: - Partition Table: Holds info about partitions. - Bootloader Code: Starts OS loading. - Sector Offset: Not directly related.
1-42cursus::02-Born2beroot2.0	102/ üíæ GPT Advantage over MBR Why does GPT support larger disks than MBR? A) It uses 64-bit addressing. B) It stores multiple partition tables. C) GPT uses smaller sectors. D) GPT bypasses BIOS limitations.	Answer: A  Explanation: GPT uses 64-bit addressing, allowing it to handle disks larger than 2 TB.  Other options: - B) True for redundancy but unrelated to disk size. - C) Sector size isn't inherently smaller. - D) BIOS limitations are replaced by UEFI.  üß† Mnemonic: '64-BIT = Big Disk Fit!'
1-42cursus::02-Born2beroot2.0	103/ üñ•Ô∏è What does BIOS primarily initialize during POST? A) CPU and RAM B) Bootloader only C) Operating System D) CMOS battery	Answer: A  Explanation: BIOS performs a Power-On Self-Test (POST) to check critical components like CPU, RAM, and drives.  Other options: - Bootloader: Initialized AFTER POST. - OS: Loaded by Bootloader. - CMOS battery: Keeps BIOS settings.  üß† Mnemonic: 'POST = Power-On Setup Test.'
1-42cursus::02-Born2beroot2.0	104/ üîç What happens if the MBR bootloader is corrupted? A) OS fails to load B) BIOS recovers automatically C) Backup bootloader executes D) GPT loads instead	Answer: A  Explanation: If the MBR bootloader is corrupted, the OS cannot load because the MBR is the entry point.  Other options: - BIOS has no auto-recovery. - No backup exists in MBR (GPT has redundancy). - GPT cannot load unless the disk is GPT-partitioned.  üß† Mnemonic: 'Corrupt MBR? No Boot for sure!'
1-42cursus::02-Born2beroot2.0	105/ üîí What is the purpose of UEFI's Secure Boot feature? A) Encrypts the operating system B) Verifies OS and driver integrity C) Bypasses bootloader D) Optimizes boot speed	Answer: B  Explanation: Secure Boot ensures that only trusted OS and drivers (signed) are loaded.  Other options: - Encryption is unrelated to boot verification. - Bypassing bootloader violates Secure Boot. - Speed optimization is not its main goal.  üß† Mnemonic: 'Secure Boot = Safe Route!'
1-42cursus::02-Born2beroot2.0	106/ üõ†Ô∏è Where does GPT store its backup partition table? A) Start of the disk B) End of the disk C) RAM D) CMOS	Answer: B  Explanation: GPT stores a backup partition table at the end of the disk for redundancy.  Other options: - Start of the disk: Holds the primary GPT header. - RAM: Temporary memory. - CMOS: BIOS settings.  üß† Mnemonic: 'GPT‚Äôs END = Backup Friend.'
1-42cursus::02-Born2beroot2.0	107/ üîß How do you access the BIOS Setup Utility? A) Press Ctrl+Alt+Del B) Press Del or F2 during startup C) Enter bootloader menu D) Load the OS first	Answer: B  Explanation: Pressing Del or F2 during startup accesses the BIOS Setup Utility.  Other options: - Ctrl+Alt+Del: Restarts the system. - Bootloader: Separate from BIOS. - OS must not load to enter BIOS.  üß† Mnemonic: 'BIOS = Boot Immediately On Startup.'
1-42cursus::02-Born2beroot2.0	108/ ‚öñÔ∏è What is a key difference between MBR and GPT? A) GPT supports redundancy; MBR does not B) MBR uses 64-bit addressing C) MBR supports unlimited partitions D) GPT is limited to BIOS systems	Answer: A  Explanation: GPT stores multiple copies of the partition table for redundancy. MBR does not.  Other options: - MBR uses 32-bit addressing. - MBR supports only 4 primary partitions. - GPT works with UEFI, not BIOS.  üß† Mnemonic: 'GPT = Good Partition Table!'
1-42cursus::02-Born2beroot2.0	109/ üöÄ Why is UEFI faster than BIOS for booting? A) Graphical interface optimization B) Supports parallel hardware initialization C) Runs POST faster D) Avoids hardware checks	Answer: B  Explanation: UEFI can initialize hardware components in parallel, reducing boot time.  Other options: - GUI does not impact boot speed. - POST is not skipped; it‚Äôs faster. - UEFI still checks hardware.  üß† Mnemonic: 'Parallel = Power Boot!'
1-42cursus::02-Born2beroot2.0	110/ üîã What role does the CMOS battery play in BIOS? A) Powers BIOS firmware B) Stores BIOS settings C) Provides system time D) Powers the CPU	Answer: B  Explanation: The CMOS battery powers the CMOS chip, which stores BIOS settings like boot order.  Other options: - BIOS firmware is stored in ROM. - System time is maintained by CMOS but displayed by BIOS. - CPU power is unrelated.  üß† Mnemonic: 'CMOS = Settings Made Operational Steady.'
1-42cursus::02-Born2beroot2.0	122/ üñ•Ô∏è MBR Boot Process char *mbr_bootloader() { // Code to load OS }How does MBR's bootloader interact with the BIOS during boot? A) It initializes the hardware B) It loads the OS from the active partition C) It partitions the disk D) It checks the boot signature	Answer: B  Explanation: The MBR's bootloader loads the OS from the active partition after the BIOS has completed its Power-On Self-Test (POST) and selected the boot device. üß† Mnemonic: 'MBR loads, BIOS gets it going'.
1-42cursus::02-Born2beroot2.0	123/ üíª GPT Redundancy struct gpt_header { uint32_t crc32; };What is the purpose of GPT's redundancy feature? A) Backup partition entries in case of failure B) Speed up disk access C) Support more partitions D) Increase disk size	Answer: A  Explanation: GPT stores multiple copies of the partition table (at both the start and end of the disk), ensuring recovery if one copy gets corrupted. üß† Mnemonic: 'Redundant to avoid the dead end'.
1-42cursus::02-Born2beroot2.0	124/ ‚öôÔ∏è BIOS POST Process void post_check() { if (!hardware_ok()) { return; } }What happens if POST detects hardware issues during BIOS initialization? A) BIOS sends an error code B) BIOS continues the boot process C) BIOS shuts down the system D) BIOS skips hardware initialization	Answer: A  Explanation: If BIOS detects a hardware issue during POST, it sends error codes or beep codes to indicate the problem. üß† Mnemonic: 'No POST, no boot!'.
1-42cursus::02-Born2beroot2.0	125/ üí° UEFI Secure Boot int uefi_secure_boot_check() { // Verify digital signature }What does UEFI Secure Boot ensure during the boot process? A) It validates the operating system's disk partitions B) It verifies the digital signature of the OS or drivers C) It encrypts the boot sector D) It optimizes boot time	Answer: B  Explanation: Secure Boot ensures that only trusted operating systems or drivers are loaded by verifying their digital signatures. üß† Mnemonic: 'Only trusted boots!'
1-42cursus::02-Born2beroot2.0	126/ ‚öñÔ∏è MBR vs GPT: Partition Limitations int mbr_partition_limit() { // Returns max primary partitions }What is the maximum number of primary partitions MBR supports? A) 2 B) 4 C) 8 D) 16	Answer: B  Explanation: MBR supports a maximum of 4 primary partitions. You can have more partitions by using an extended partition. üß† Mnemonic: 'Four's the limit for MBR'.
1-42cursus::02-Born2beroot2.0	127/ üíæ GPT Disk Size Limitations uint64_t disk_size = 9; // ZettabytesWhat is the maximum disk size supported by GPT? A) 2 TB B) 9.4 ZB C) 1 PB D) 10 TB	Answer: B  Explanation: GPT can handle disks much larger than 2 TB, with a practical limit of 9.4 ZB (zettabytes). üß† Mnemonic: 'GPT handles bigger disks with ease'.
1-42cursus::02-Born2beroot2.0	128/ üöÄ UEFI vs BIOS Boot Time int uefi_boot_time() { // Measure boot duration }Why does UEFI typically offer faster boot times than BIOS? A) It bypasses hardware checks B) It directly interacts with the OS loader C) It reduces partition table size D) It does not use the POST process	Answer: B  Explanation: UEFI interacts directly with the operating system loader, which leads to faster boot times compared to BIOS. üß† Mnemonic: 'UEFI gets straight to the OS'.
1-42cursus::02-Born2beroot2.0	129/ üõ†Ô∏è BIOS Setup Utility void bios_setup() { // Configure system settings }What does the BIOS setup utility allow users to configure? A) Network speed settings B) Boot order and hardware settings C) CPU clock speed only D) RAM speed only	Answer: B  Explanation: The BIOS setup utility allows users to configure boot order, hardware settings, and other system parameters. üß† Mnemonic: 'BIOS controls the hardware flow'.
1-42cursus::02-Born2beroot2.0	130/ üåê UEFI Compatibility Mode void uefi_legacy_mode() { // Enable BIOS compatibility }What is the purpose of UEFI's Compatibility Support Module (CSM)? A) To emulate BIOS functionality for legacy systems B) To enhance disk performance C) To enable Secure Boot D) To support up to 256 partitions	Answer: A  Explanation: The Compatibility Support Module (CSM) in UEFI allows emulation of BIOS functionality for legacy systems that require it. üß† Mnemonic: 'CSM ensures old hardware still works.'
1-42cursus::02-Born2beroot2.0	131/ üñ•Ô∏è MBR Bootloader Process void mbr_boot() { // Begin booting process }What is the first step in the MBR bootloader process? A) Load the operating system kernel B) Initialize the hardware components C) Transfer control to the OS bootloader D) Identify the active partition	Answer: D  Explanation: The first step in the MBR bootloader process is identifying the active partition, followed by loading the OS bootloader. üß† Mnemonic: 'Active partition is key to booting with MBR.'
1-42cursus::02-Born2beroot2.0	132/ üíæ GPT Disk Partition Structure struct gpt_entry { uint64_t first_lba; };What is the primary benefit of GPT over MBR in terms of partition structure? A) Supports unlimited partitions B) Allows primary and extended partitions C) Increases the disk size limit D) Uses a backup partition table for redundancy	Answer: D  Explanation: GPT has a backup partition table, providing redundancy in case of corruption, which MBR lacks. üß† Mnemonic: 'Redundancy makes GPT more reliable'.
1-42cursus::02-Born2beroot2.0	133/ ‚öôÔ∏è BIOS POST and Boot Order void post_boot_check() { // Validate boot devices }In BIOS, what happens if the boot order is incorrectly set? A) The system boots from a secondary device B) The system shuts down immediately C) The BIOS will auto-correct the order D) The system attempts to boot from the first device only	Answer: A  Explanation: If the boot order is incorrect, BIOS will attempt to boot from the next available device in the list. üß† Mnemonic: 'Incorrect order, but the system keeps trying.'
1-42cursus::02-Born2beroot2.0	134/ üíª UEFI Boot Process void uefi_boot() { // Load UEFI boot manager }In UEFI, what is the role of the boot manager? A) To execute the kernel B) To load device drivers C) To provide a user interface for boot options D) To load the OS loader or bootloader	Answer: D  Explanation: The UEFI boot manager is responsible for loading the OS loader or bootloader after initialization. üß† Mnemonic: 'UEFI gets the loader running.'
1-42cursus::02-Born2beroot2.0	135/ üîí GPT and Secure Boot Compatibility void secure_boot_check() { // Verify OS loader signature }Which of the following is a requirement for Secure Boot to work in UEFI? A) The OS loader must be signed by a trusted authority B) The system must have a legacy BIOS C) The disk must be formatted with MBR D) The bootloader must support GPT partitions	Answer: A  Explanation: Secure Boot requires that the OS loader be signed by a trusted authority, ensuring that only trusted software is loaded. üß† Mnemonic: 'Trusted software, trusted boot'.
1-42cursus::02-Born2beroot2.0	136/ ‚ö° BIOS Speed vs UEFI Performance void bios_vs_uefi() { // Compare boot times }Why is UEFI faster than BIOS in terms of booting? A) UEFI eliminates hardware checks B) UEFI directly interacts with the operating system C) UEFI loads the bootloader in parallel D) BIOS waits for the user input before proceeding	Answer: B  Explanation: UEFI directly interacts with the OS bootloader, reducing unnecessary delays and speeding up the boot process compared to BIOS. üß† Mnemonic: 'UEFI goes straight to the OS'.
1-42cursus::02-Born2beroot2.0	137/ üíΩ GPT Partition Limitations uint32_t partition_limit = 128;How many partitions can GPT support on a single disk? A) 128 B) 16 C) 4 D) 256	Answer: A  Explanation: GPT supports up to 128 partitions on a single disk, which is significantly more than MBR's 4 partitions. üß† Mnemonic: 'GPT's 128 partitions are a big upgrade'.
1-42cursus::02-Born2beroot2.0	138/ üîê UEFI Secure Boot vs MBR void uefi_secure_boot_check() { // Check secure boot status }How does Secure Boot in UEFI differ from MBR? A) Secure Boot verifies bootloader signatures, while MBR does not B) MBR offers faster boot times C) Secure Boot requires the use of GPT partitions D) MBR encrypts the boot sector	Answer: A  Explanation: Secure Boot verifies the digital signature of the bootloader, which is a feature not available in MBR. üß† Mnemonic: 'Secure Boot checks before MBR boots.'
1-42cursus::02-Born2beroot2.0	139/ üîÅ MBR Boot Integrity void mbr_integrity_check() { // Ensure boot integrity }How does the MBR handle boot integrity during the boot process? A) It uses a checksum to verify the integrity of the bootloader B) It performs a system diagnostic on every boot C) It loads a separate boot manager D) It does not check boot integrity	Answer: A  Explanation: MBR uses a checksum to verify the integrity of the bootloader and ensures that the bootloader has not been tampered with. üß† Mnemonic: 'MBR checks integrity for safe boot'.
1-42cursus::02-Born2beroot2.0	140/ üìÇ UEFI File System Access void uefi_fs_access() { // Access files on the EFI partition }How does UEFI access the file system during boot? A) UEFI uses a FAT file system on the EFI partition B) UEFI directly interacts with NTFS partitions C) UEFI skips file system access D) UEFI uses FAT32 on any partition	Answer: A  Explanation: UEFI accesses the file system on the EFI partition, which is formatted with a FAT file system. üß† Mnemonic: 'UEFI uses FAT to access EFI.'
1-42cursus::02-Born2beroot2.0	121/ üñ•Ô∏è What is the main purpose of Debian Linux? Which of the following best describes Debian's intended use case? A) General-purpose OS B) Enterprise server platform C) Desktop-focused OS D) Cloud-first solution	Answer: A  Explanation: Debian is a general-purpose Linux distribution known for its stability and extensive software repositories. It is aimed at a wide range of users, from home users to developers and servers. üß† Mnemonic: 'Debian for all, from home to hall!'
1-42cursus::02-Born2beroot2.0	122/ üßë‚Äçüíª What are the security priorities of Debian? How does Debian approach security updates? A) Instant updates for all packages B) Timely patches with extensive testing C) No focus on security updates D) Only security updates on critical releases	Answer: B  Explanation: Debian prioritizes security and stability, often delaying updates for extensive testing. The 'Stable' branch ensures reliability and security. üß† Mnemonic: 'Test before you rest, security comes first!'
1-42cursus::02-Born2beroot2.0	123/ üîÑ How does Rocky Linux differ from Debian in terms of its origin? Which statement correctly describes the origin of Rocky Linux? A) Independent community-driven project B) A downstream rebuild of RHEL C) Based on Ubuntu D) Originates from the CentOS Foundation	Answer: B  Explanation: Rocky Linux is a downstream rebuild of Red Hat Enterprise Linux (RHEL), created to provide a stable enterprise-grade alternative. üß† Mnemonic: 'Rocky rises from RHEL, built for enterprises!'
1-42cursus::02-Born2beroot2.0	124/ üè¢ What target audience is Rocky Linux primarily aimed at? Which group of users benefits most from Rocky Linux? A) Developers and home users B) Small businesses with limited support C) Enterprises and organizations D) General Linux enthusiasts	Answer: C  Explanation: Rocky Linux targets enterprises and organizations seeking a free alternative to RHEL, offering high stability and long-term support. üß† Mnemonic: 'Rocky supports enterprises, not home bases!'
1-42cursus::02-Born2beroot2.0	125/ üèóÔ∏è How does Debian approach release cycles? What is the release cycle approach for Debian ? A) Fixed cycle of 1 year B) Flexible cycle with stable releases every 2-3 years C) Immediate releases with no planned cycle D) Tied to RHEL release schedule	Answer: B  Explanation: Debian follows a flexible release cycle, with stable releases occurring every 2-3 years. This approach allows for thorough testing before releases. üß† Mnemonic: 'Flexibility over rigidity, stability comes with time!'
1-42cursus::02-Born2beroot2.0	126/ üîí Which of the following best describes the security update process in Rocky Linux? How does Rocky Linux manage security updates? A) Instant security patches B) Delayed patches until all testing is complete C) Timely patches in sync with RHEL D) No updates for security issues	Answer: C  Explanation: Rocky Linux follows RHEL‚Äôs security update schedule, providing timely patches for critical issues in line with enterprise needs. üß† Mnemonic: 'Stay in sync with RHEL, for secure shell!'
1-42cursus::02-Born2beroot2.0	127/ üñ•Ô∏è Which of the following is the primary package manager for Debian Linux? What is the default package manager used in Debian? A) dnf/yum B) rpm C) APT (.deb) D) pacman	Answer: C  Explanation: Debian uses APT (Advanced Package Tool) for package management, utilizing .deb packages. üß† Mnemonic: 'APT is the key to Debian‚Äôs stability!'
1-42cursus::02-Born2beroot2.0	128/ ‚öôÔ∏è What does Rocky Linux prioritize in terms of stability? How does Rocky Linux ensure stability for its target audience? A) Provides maximum flexibility B) Focuses on enterprise-grade stability matching RHEL C) Changes frequently to adapt to new technologies D) Aimed at general home use	Answer: B  Explanation: Rocky Linux prioritizes enterprise-grade stability, providing consistent performance with a predictable release cycle, ensuring compatibility with RHEL. üß† Mnemonic: 'Enterprise stability, RHEL compatibility!'
1-42cursus::02-Born2beroot2.0	129/ üåê How does the package manager of Rocky Linux compare to that of Debian? What is the primary difference in package management between Rocky Linux and Debian? A) Rocky uses APT, Debian uses dnf B) Rocky uses rpm-based dnf/yum, Debian uses .deb-based APT C) Both use the same package manager D) Debian uses rpm-based dnf	Answer: B  Explanation: Rocky Linux uses dnf/yum and rpm packages, whereas Debian uses APT for .deb packages. üß† Mnemonic: 'dnf and rpm for Rocky, APT and .deb for Debian!'
1-42cursus::02-Born2beroot2.0	130/ üñ•Ô∏è Which of the following is an advantage of using Debian for a home user? What makes Debian a good choice for home users? A) Enterprise-grade stability B) Extensive software repositories and flexibility C) Predictable release cycles D) Tight integration with cloud environments	Answer: B  Explanation: Debian's extensive software repositories and flexible nature make it a good choice for home users and developers. üß† Mnemonic: 'Debian‚Äôs flexibility fits all needs!'
1-42cursus::02-Born2beroot2.0	122/ üõ†Ô∏è Debian vs. Rocky Linux: Which has a better community-driven philosophy? Which one is more focused on open-source values ? A) Debian B) Rocky Linux C) Both are equal D) Neither	Answer: A  Explanation: Debian emphasizes free and open-source software as a core philosophy, making it more aligned with open-source values. üß† Mnemonic: 'Debian = Freedom, Rocky = Enterprise'  Common Pitfall: Rocky Linux focuses on enterprise needs, not open-source ideology, which could lead to confusion about its goals.
1-42cursus::02-Born2beroot2.0	123/ üì¶ Which package manager is used by Debian and Rocky Linux? Debian uses APT (.deb), while Rocky Linux uses dnf/yum (.rpm).How do the package management strategies compare? A) Debian's APT is better for stability B) Rocky's dnf/yum is more feature-rich C) Both use the same strategy D) Rocky's package manager is more user-friendly	Answer: A  Explanation: APT in Debian is known for stability and ease of use, especially for beginners. DNF/YUM in Rocky Linux are designed for enterprise usage but can be more complex. üß† Mnemonic: 'APT is the stable path, DNF/YUM is for enterprise.'
1-42cursus::02-Born2beroot2.0	124/ üîí Debian vs. Rocky Linux: Which offers better security and patch management for enterprises? Which distribution aligns more with enterprise security needs? A) Debian B) Rocky Linux C) Both are equal D) Neither	Answer: B  Explanation: Rocky Linux, as a downstream of RHEL, aligns with enterprise-grade security patches and management, making it more suited for production environments. üß† Mnemonic: 'Rocky = Enterprise Security, Debian = Flexible Testing'
1-42cursus::02-Born2beroot2.0	125/ üîÑ Which distribution has a more predictable release cycle? Which release cycle is more enterprise-friendly? A) Debian B) Rocky Linux C) Both have the same cycle D) Neither	Answer: B  Explanation: Rocky Linux follows RHEL's release cycle, which is predictable and reliable for enterprise needs. Debian‚Äôs release cycle is flexible and can vary. üß† Mnemonic: 'Rocky = Predictable, Debian = Flexible'
1-42cursus::02-Born2beroot2.0	126/ üßë‚Äçüíª How does the stability of Debian compare with that of Rocky Linux in production environments? Which is more suitable for mission-critical applications? A) Debian's stability is best for long-term reliability B) Rocky Linux‚Äôs stability matches RHEL for production-grade systems C) Both are equally stable D) Neither is stable enough for production environments	Answer: B  Explanation: Rocky Linux is designed specifically for production environments, with RHEL compatibility ensuring high stability. üß† Mnemonic: 'Rocky for production, Debian for flexibility'
1-42cursus::02-Born2beroot2.0	127/ üß≥ What type of users should choose Rocky Linux over Debian? Which audience benefits the most from Rocky Linux? A) Developers and casual users B) Enterprises and server administrators C) Home users who need a flexible OS D) Enthusiasts who enjoy customizing their OS	Answer: B  Explanation: Rocky Linux is tailored to enterprises and server administrators who need a stable, RHEL-compatible OS for production workloads. üß† Mnemonic: 'Rocky = Enterprise, Debian = Developer/Custom'
1-42cursus::02-Born2beroot2.0	128/ üè¢ What‚Äôs the main difference in the target audience of Debian and Rocky Linux? Which distribution is more developer-focused? A) Debian targets enterprises B) Rocky Linux targets home users C) Debian targets a wider range of users, including developers D) Rocky Linux targets developers more	Answer: C  Explanation: Debian serves a broad range of users, from home users to developers, while Rocky Linux primarily focuses on enterprise servers and production workloads. üß† Mnemonic: 'Debian = All users, Rocky = Enterprise'
1-42cursus::02-Born2beroot2.0	129/ üèóÔ∏è Which distribution is more suitable for creating a custom Linux distribution? Which one provides a more flexible foundation for customization? A) Debian B) Rocky Linux C) Both provide equal flexibility D) Neither provides flexibility	Answer: A  Explanation: Debian‚Äôs community-driven nature makes it more suitable for building custom Linux distributions and derivatives, like Ubuntu. üß† Mnemonic: 'Debian = Customizable, Rocky = Stable'
1-42cursus::02-Born2beroot2.0	130/ üì° How do Debian and Rocky Linux approach system updates and upgrades? Which is more suited for frequent updates? A) Debian provides faster updates B) Rocky Linux focuses on stable, long-term support C) Both have the same upgrade policies D) Neither provides system upgrades	Answer: B  Explanation: Rocky Linux, with its RHEL roots, prioritizes long-term stability and slower, more controlled updates. Debian tends to have quicker updates but less enterprise-level stability. üß† Mnemonic: 'Rocky = Stability, Debian = Quick Updates'
1-42cursus::02-Born2beroot2.0	131/ üí° Debian‚Äôs flexibility vs. Rocky Linux‚Äôs enterprise focus: Which one is more suited for cloud environments? Which distribution is better for cloud and containerized environments? A) Debian‚Äôs flexibility allows better adaptation B) Rocky Linux‚Äôs RHEL compatibility suits large-scale enterprise environments C) Both can be used equally well D) Neither is suited for cloud environments	Answer: A  Explanation: Debian‚Äôs flexibility and compatibility with a wide range of use cases make it better suited for dynamic cloud environments and custom configurations. üß† Mnemonic: 'Debian = Flexibility, Rocky = Enterprise'
1-42cursus::02-Born2beroot2.0	101/ üîÑ What is the purpose of the MMU in Virtual Memory? void translate_virtual_to_physical(MMU *mmu, VirtualAddress *vaddr);Which statement about the MMU is correct? A) It directly allocates virtual addresses to programs B) It translates virtual addresses to physical addresses C) It manages the swapping of memory pages D) It controls access permissions for memory regions	Answer: B  Explanation: The MMU translates virtual addresses to physical addresses using page tables. üß† Mnemonic: 'MMU = Mapper of Memory Units' Other options are incorrect: - A) Virtual addresses are allocated by the OS, not MMU. - C) Swapping is managed by the page supervisor in the OS. - D) While access permissions are checked, it is not its primary function.
1-42cursus::02-Born2beroot2.0	102/ üß† TLB Optimization int search_tlb(TLB *tlb, VirtualAddress *vaddr);What happens if a TLB hit occurs? A) Address is retrieved from secondary storage B) Address is translated directly from the TLB C) Page fault is raised D) Memory access is denied	Answer: B  Explanation: A TLB hit means the address translation is found in the TLB cache, avoiding slower page table lookup. üß† Mnemonic: 'Hit the Cache, Skip the Walk' Other options are incorrect: - A) Secondary storage is accessed on a page fault. - C) Page faults occur on a TLB miss and invalid page entry. - D) Access is denied if the process lacks permission.
1-42cursus::02-Born2beroot2.0	103/ üõë Page Fault Handling void handle_page_fault(PageSupervisor *ps, VirtualAddress *vaddr);What is the first action taken on a page fault? A) Page is fetched from the disk B) Memory is allocated C) MMU requests the page supervisor to handle D) Process is terminated immediately	Answer: C  Explanation: On a page fault, the MMU hands control to the OS page supervisor, which decides the next step. üß† Mnemonic: 'MMU Hands Over, Supervisor Takes Over' Other options are incorrect: - A) Disk fetch occurs later if the page is not in memory. - B) Memory allocation depends on the supervisor. - D) Termination happens only if access is invalid (segmentation fault).
1-42cursus::02-Born2beroot2.0	104/ üîÑ Kernel Memory Mapping int map_kernel_memory(void *vaddr, size_t size);Which statement is true for kernel virtual memory? A) It changes with process context switches B) It is mapped to physical memory permanently C) Kernel memory can generate page faults D) It uses a separate MMU	Answer: B  Explanation: Kernel virtual memory is permanently mapped to physical memory and shared across all processes. üß† Mnemonic: 'Kernel = Constant Mapper' Other options are incorrect: - A) Kernel memory mapping is constant across all processes. - C) Kernel code must never generate page faults for system stability. - D) The same MMU handles user and kernel memory.
1-42cursus::02-Born2beroot2.0	105/ ‚öôÔ∏è Page Replacement Algorithms int replace_page(PageReplacement *pr, Memory *mem);Which algorithm is typically used for page replacement? A) FIFO B) LRU C) Random D) Best-fit	Answer: B  Explanation: Least Recently Used (LRU) is a common algorithm that replaces the page used least recently to optimize memory usage. üß† Mnemonic: 'LRU = Least Recently Used Up' Other options are incorrect: - A) FIFO does not account for recency. - C) Random is not optimal. - D) Best-fit is for memory allocation, not page replacement.
1-42cursus::02-Born2beroot2.0	106/ üß™ Swap File Usage void swap_page_to_disk(PageSupervisor *ps, Page *page);What is the swap file's main role? A) Extends RAM by storing unused pages B) Stores kernel code C) Acts as a TLB cache D) Prevents page faults	Answer: A  Explanation: The swap file extends available memory by storing inactive pages when RAM is full. üß† Mnemonic: 'Swap = Store When Active's Poor' Other options are incorrect: - B) Kernel code is stored in main memory. - C) The TLB cache stores address mappings, not pages. - D) Page faults occur when accessing swapped-out pages.
1-42cursus::02-Born2beroot2.0	107/ üìÑ Segmentation Fault vs Page Fault int access_memory(VirtualAddress *vaddr);What causes a segmentation fault? A) Invalid virtual memory access B) Page not in physical memory C) TLB miss D) Outdated page table entry	Answer: A  Explanation: A segmentation fault occurs when accessing a restricted or invalid memory region. üß† Mnemonic: 'SegFault = Security Breach Halt' Other options are incorrect: - B) This leads to a page fault, not segmentation fault. - C) TLB miss leads to page table lookup. - D) Outdated page entries are corrected by the OS.
1-42cursus::02-Born2beroot2.0	108/ üìñ Virtual vs Physical Memory Which of the following is true about virtual memory? A) It is faster than physical memory B) It is managed solely by hardware C) It extends memory using disk storage D) It cannot handle large processes	Answer: C  Explanation: Virtual memory extends physical memory by using secondary storage (disk) through paging. üß† Mnemonic: 'Virtual = Versatile Memory Boost' Other options are incorrect: - A) Virtual memory is slower due to disk access. - B) It is managed by both hardware and software. - D) It enables handling of large processes.
1-42cursus::02-Born2beroot2.0	109/ üìÑ Why is kernel memory always in RAM? A) To prevent page faults in the kernel B) To increase process isolation C) To save disk space D) To support larger address spaces	Answer: A  Explanation: Kernel memory must always reside in RAM to ensure stability and prevent page faults during critical operations. üß† Mnemonic: 'Kernel Never Falls' Other options are incorrect: - B) Isolation is achieved through memory mapping, not permanence in RAM. - C) Disk space is unrelated to kernel memory location. - D) Address space size is independent of kernel location.
1-42cursus::02-Born2beroot2.0	110/ ‚ö° What is Paging in Virtual Memory? void page_memory(Page *page, Memory *mem);What does paging achieve? A) Divides memory into fixed-size blocks B) Allocates variable-sized memory segments C) Eliminates need for virtual memory D) Bypasses TLB cache	Answer: A  Explanation: Paging divides memory into fixed-size blocks (pages) for efficient management. üß† Mnemonic: 'Paging = Partition for Performance' Other options are incorrect: - B) Segmentation involves variable-sized memory. - C) Virtual memory relies on paging. - D) TLB cache is used alongside paging.
1-42cursus::02-Born2beroot2.0	001/ üß† What is the purpose of the Memory Management Unit (MMU)? // A key component for virtual memory // How does it translate virtual to physical addresses?Which statement is correct about the MMU? A) It manages swapping between RAM and disk B) It translates virtual addresses to physical addresses C) It allocates physical memory directly D) It handles CPU scheduling	Answer: B  Explanation: - The MMU is a hardware component that translates virtual addresses to physical addresses. - It does not handle swapping (OS does that). - üß† Mnemonic: MMU = 'Mapping Made Useful'.  Why others are wrong: A) Swapping is managed by the page supervisor in the OS. C) Physical memory allocation is also handled by the OS. D) CPU scheduling is unrelated to memory management.
1-42cursus::02-Born2beroot2.0	"002/ üìÑ How does Paging enable virtual memory? #define PAGE_SIZE 4096 void map_page();What is a primary advantage of paging? A) Pages allow large memory chunks to be allocated B) Pages reduce external fragmentation C) Pages eliminate page faults D) Pages avoid the need for MMU"	Answer: B  Explanation: - Paging breaks memory into small, fixed-sized blocks to reduce external fragmentation. - üß† Mnemonic: 'Paging Prevents Patching Gaps' (fragmentation).  Why others are wrong: A) Pages deal with small blocks, not large ones. C) Page faults occur due to missing pages in RAM. D) The MMU is required to implement paging.
1-42cursus::02-Born2beroot2.0	003/ üåÄ Swapping Impact on Performance int main() { /* Simulate page swaps */ }How does swapping affect performance? A) Minimizes page faults B) Always improves memory access speed C) Slows down access when RAM is full D) Has no impact if the TLB is used	Answer: C  Explanation: - Swapping occurs when RAM is full, causing pages to be written to and read from disk, which is slow. - üß† Mnemonic: 'Swap Slows RAM Hops'.  Why others are wrong: A) It doesn‚Äôt prevent page faults; it handles them. B) Swapping decreases memory access speed. D) TLB improves translation but can‚Äôt prevent swapping delays.
1-42cursus::02-Born2beroot2.0	004/ üö© What is a page fault? // Occurs when a page is missing from memory What happens next?What triggers a page fault? A) Invalid memory access B) A page not in RAM is accessed C) TLB hit D) OS kernel is paged out	Answer: B  Explanation: - A page fault occurs when a process tries to access a page not currently in RAM. - üß† Mnemonic: 'Faults Find Missing Pages'.  Why others are wrong: A) Invalid memory access causes a segmentation fault, not a page fault. C) TLB hit means the address translation succeeded. D) Kernel memory is never paged out to avoid system instability.
1-42cursus::02-Born2beroot2.0	005/ ‚ö° Translation Lookaside Buffer (TLB) // Cache for page table lookupsWhat is the primary role of the TLB? A) Store recently accessed memory pages B) Store virtual-to-physical address mappings C) Allocate memory dynamically D) Handle page replacement	Answer: B  Explanation: - The TLB caches mappings between virtual and physical addresses to speed up memory access. - üß† Mnemonic: 'TLB = Tiny Lookup Boost'.  Why others are wrong: A) The page cache stores memory pages, not TLB. C) Memory allocation is handled by the OS. D) Page replacement is part of the paging supervisor‚Äôs role.
1-42cursus::02-Born2beroot2.0	006/ ‚úÇÔ∏è Segmentation in Virtual Memory int segment_id = get_segment();What is a key drawback of segmentation? A) High internal fragmentation B) Requires contiguous memory blocks C) Low performance due to page faults D) Overhead of TLB lookups	Answer: B  Explanation: - Segmentation requires contiguous blocks of memory, which makes it prone to external fragmentation. - üß† Mnemonic: 'Segments Seek Spaces'.  Why others are wrong: A) Paging has internal fragmentation, not segmentation. C) Segmentation doesn‚Äôt involve page faults. D) TLB lookups apply to paging, not segmentation.
1-42cursus::02-Born2beroot2.0	007/ üõ°Ô∏è Kernel Space vs User Space // What happens if kernel memory is paged out?Why isn‚Äôt kernel memory paged out in Linux? A) Kernel memory uses segmentation B) Kernel handles TLB faults efficiently C) Kernel cannot recover from its own page faults D) Kernel memory doesn‚Äôt use virtual addresses	Answer: C  Explanation: - Kernel memory must remain in physical RAM to handle critical tasks and avoid recursive page faults. - üß† Mnemonic: 'Kernel Keeps Critical Pages'.  Why others are wrong: A) Segmentation isn‚Äôt used for kernel memory in Linux. B) TLB faults are unrelated to kernel memory paging. D) Kernel memory uses virtual addresses mapped to fixed physical memory.
1-42cursus::02-Born2beroot2.0	008/ üîÑ Least Recently Used (LRU) Algorithm struct page *choose_lru_page();What does the LRU algorithm prioritize? A) The page most frequently used B) The page least recently used C) The smallest page in memory D) The page with the largest size	Answer: B  Explanation: - LRU replaces the page that hasn‚Äôt been used for the longest time. - üß† Mnemonic: 'Least Recently Used = Lost From RAM'.  Why others are wrong: A) This describes Most Frequently Used (MFU). C) Page size doesn‚Äôt matter in LRU. D) Same as C; size is irrelevant.
1-42cursus::02-Born2beroot2.0	009/ üåê Advantages of Virtual Memory // Abstracts physical memoryWhich is NOT an advantage of virtual memory? A) Isolates processes from each other B) Allows programs to exceed physical RAM C) Eliminates the need for RAM D) Simplifies memory management for developers	Answer: C  Explanation: - Virtual memory complements RAM but doesn‚Äôt eliminate the need for it. - üß† Mnemonic: 'Virtual Memory Needs Real RAM'.  Why others are wrong: A) True; processes are isolated for security. B) True; paging allows programs to use more memory than physically available. D) True; developers don‚Äôt manage memory allocation manually.
1-42cursus::02-Born2beroot2.0	010/ üóÇÔ∏è Page Table Design void lookup_page_table();What happens when a page table lookup fails? A) The system crashes B) A TLB hit occurs C) The page supervisor is invoked D) Kernel memory is paged out	Answer: C  Explanation: - When a lookup fails, the page supervisor handles the page fault to load the missing page. - üß† Mnemonic: 'Lookup Failure Calls Supervisor'.  Why others are wrong: A) The system doesn‚Äôt crash; it handles the fault. B) A TLB hit means a successful lookup. D) Kernel memory is never paged out.
1-42cursus::02-Born2beroot2.0	001/ üåê What is Virtual Memory? // A mechanism to extend RAM using diskWhy is virtual memory important? A) It allows multitasking B) It ensures every process has its own isolated memory C) It allows programs to use more memory than physically available D) All of the above	Answer: D  Explanation: - Virtual memory abstracts physical memory, enabling multitasking, memory isolation, and large program execution. - üß† Mnemonic: 'Virtual Memory Makes Big Dreams Possible.'
1-42cursus::02-Born2beroot2.0	002/ üñ•Ô∏è What is Physical Memory? // The actual RAM modules in your systemHow is physical memory different from virtual memory? A) Physical memory is larger B) Physical memory is hardware-based C) Virtual memory is faster D) Physical memory is unlimited	Answer: B  Explanation: - Physical memory is the real hardware (RAM), while virtual memory is an abstraction created by the OS. - üß† Mnemonic: 'Virtual = Software, Physical = Hardware.'
1-42cursus::02-Born2beroot2.0	003/ üóÇÔ∏è What is a Page Table? // A mapping table for virtual to physical addressesWhy is the page table essential for virtual memory? A) It maps virtual addresses to physical addresses B) It speeds up disk access C) It allocates physical memory D) It prevents memory leaks	Answer: A  Explanation: - The page table is like a directory that maps each virtual address to a corresponding physical address. - üß† Mnemonic: 'Page Table = Phonebook for Memory Addresses.'
1-42cursus::02-Born2beroot2.0	"004/ üìÑ What is Paging? #define PAGE_SIZE 4096What is the primary purpose of paging? A) To divide memory into fixed-sized blocks B) To allocate memory dynamically C) To increase the CPU‚Äôs speed D) To remove page faults"	Answer: A  Explanation: - Paging divides memory into small, fixed-size blocks called pages, simplifying memory management and reducing fragmentation. - üß† Mnemonic: 'Pages Partition RAM.'
1-42cursus::02-Born2beroot2.0	005/ ‚úÇÔ∏è What is Segmentation? // Divides memory into logical segmentsHow is segmentation different from paging? A) Segments are fixed-size; pages are variable-size B) Segments are variable-size; pages are fixed-size C) Both are fixed-size D) Both are variable-size	Answer: B  Explanation: - Segments can vary in size and represent logical divisions (e.g., code, data), while pages are always fixed in size. - üß† Mnemonic: 'Segments Scale, Pages Stay Fixed.'
1-42cursus::02-Born2beroot2.0	006/ ‚ö° What is the Translation Lookaside Buffer (TLB)? // Speeds up virtual-to-physical translationWhy is the TLB important? A) It reduces the time needed to access memory B) It prevents page faults C) It increases CPU clock speed D) It stores all memory pages	Answer: A  Explanation: - The TLB caches recent virtual-to-physical translations, speeding up memory access. - üß† Mnemonic: 'TLB = Translation Lightning Boost.'
1-42cursus::02-Born2beroot2.0	007/ üåÄ What is Swapping? // Moving data between RAM and diskWhen does swapping occur? A) When there‚Äôs enough free RAM B) When RAM is full and more memory is needed C) When the CPU is idle D) When all processes are terminated	Answer: B  Explanation: - Swapping occurs when RAM is full, and the OS moves some data to disk to make space for active processes. - üß† Mnemonic: 'Swap Saves Space (at a Cost).'
1-42cursus::02-Born2beroot2.0	008/ üö© What is a Page Fault? // Missing page in RAMWhy does a page fault occur? A) The page is already in RAM B) The page is not present in RAM C) The CPU stops working D) The virtual memory system fails	Answer: B  Explanation: - A page fault happens when a program tries to access a page that is not currently in RAM. The OS loads the page from disk. - üß† Mnemonic: 'Page Fault? Fetch From Disk.'
1-42cursus::02-Born2beroot2.0	009/ üõ°Ô∏è What is Kernel Space? // Reserved memory for the OSHow is kernel space different from user space? A) Kernel space is for user applications B) Kernel space is for the OS and critical processes C) Kernel space is slower D) Kernel space is optional in modern systems	Answer: B  Explanation: - Kernel space is reserved for the operating system and critical tasks, separate from user processes. - üß† Mnemonic: 'Kernel Keeps Control.'
1-42cursus::02-Born2beroot2.0	010/ üåü Benefits of Virtual Memory // Enables efficient memory useWhat is NOT a benefit of virtual memory? A) Memory isolation for processes B) Efficient multitasking C) Unlimited physical memory D) Ability to use disk space as memory	Answer: C  Explanation: - Virtual memory allows the system to use disk as an extension of RAM, but it cannot create unlimited physical memory. - üß† Mnemonic: 'Virtual Memory = Real Limits.'
1-42cursus::02-Born2beroot2.0	"001/ üß† What problem does Virtual Memory solve regarding limited RAM? int main() { printf(\Program requires 3 GB of RAM, but only 2 GB is available.\\n\""); } A) It increases the physical RAM size B) It maps unused RAM to other devices C) It uses disk space as additional memory D) It restricts program size to available RAM"""	Answer: C  Explanation: Virtual memory uses swap space (on disk) to extend available memory. - When RAM is full, unused data is swapped to disk. üß† Mnemonic: 'RAM gets help from Disk'  Other options: A) Incorrect: Virtual memory doesn't physically increase RAM. B) Incorrect: It doesn't map unused RAM; it manages active memory. D) Incorrect: It allows programs to use more memory than physically available.
1-42cursus::02-Born2beroot2.0	002/ üõ°Ô∏è How does Virtual Memory improve security between programs? Example: Video Game writes health at address 64. Music Player writes song duration at address 64. A) Assigns unique physical memory spaces B) Creates shared virtual addresses C) Prevents programs from writing to memory D) Limits access to the same data structure	Answer: A  Explanation: Virtual memory assigns each program its own isolated address space mapped to unique physical memory locations. - Prevents programs from overwriting each other's data. üß† Mnemonic: 'Isolation solves collision'  Other options: B) Incorrect: Virtual addresses may overlap but are mapped to different physical addresses. C) Incorrect: Programs can still write to their assigned spaces. D) Incorrect: It doesn‚Äôt impose such structural limits.
1-42cursus::02-Born2beroot2.0	003/ üîÑ What causes a page fault in Virtual Memory? int *ptr = malloc(sizeof(int) * 1e6); // Access beyond RAM size A) Program crashes due to lack of memory B) OS swaps data from disk to RAM C) CPU accesses a restricted address D) Program requests more RAM dynamically	Answer: B  Explanation: A page fault occurs when requested data is not in RAM but stored in swap memory (disk). - OS retrieves data from disk and updates mapping. üß† Mnemonic: 'Fault? Find it on Disk'  Other options: A) Incorrect: Virtual memory prevents crashes by using swap. C) Incorrect: Restricted addresses raise segmentation faults. D) Incorrect: Memory allocation is not related to page faults.
1-42cursus::02-Born2beroot2.0	004/ üìè How does Virtual Memory solve fragmentation? Scenario: 2 GB RAM split into 1 GB chunks. A) Moves programs to continuous RAM B) Maps virtual memory to non-contiguous RAM C) Compresses memory usage D) Allocates larger memory blocks	Answer: B  Explanation: Virtual memory allows non-contiguous physical memory to appear as contiguous virtual memory to programs. - Prevents fragmentation issues. üß† Mnemonic: 'Map the gaps, no collapse'  Other options: A) Incorrect: Programs are not moved. C) Incorrect: Virtual memory doesn‚Äôt compress memory. D) Incorrect: Allocation size is independent of fragmentation.
1-42cursus::02-Born2beroot2.0	005/ üó∫Ô∏è What is a page table in Virtual Memory? Example: int map_address(int vaddr) { return page_table[vaddr]; } A) A map of virtual to physical addresses B) A list of available RAM blocks C) A mechanism to restrict memory access D) A storage for shared memory addresses	Answer: A  Explanation: A page table is a data structure mapping virtual addresses to physical addresses. üß† Mnemonic: 'Page the map for address gap'  Other options: B) Incorrect: It doesn‚Äôt list available RAM. C) Incorrect: Page tables don‚Äôt handle restrictions. D) Incorrect: Shared memory is mapped separately.
1-42cursus::02-Born2beroot2.0	006/ üñ•Ô∏è Why do programs crash without Virtual Memory? char *large_array = malloc(5e9); // Exceeds physical RAM A) Memory exceeds physical RAM B) OS prevents large allocations C) CPU cannot address large memory D) Disk doesn‚Äôt store extra memory	Answer: A  Explanation: Programs crash without virtual memory because physical RAM is limited and there‚Äôs no swap space to handle overflow. üß† Mnemonic: 'Without virtual, programs spiral'  Other options: B) Incorrect: The OS allows large allocations with virtual memory. C) Incorrect: CPUs support large address spaces with virtual memory. D) Incorrect: Disks are used with swap for extra memory.
1-42cursus::02-Born2beroot2.0	007/ üìâ What is the performance impact of frequent page faults? int *array = malloc(1e6); // Memory-swapping intensive A) Programs run faster B) Increased CPU usage C) Slow program execution D) Memory allocation errors	Answer: C  Explanation: Frequent page faults slow execution due to the time required to fetch data from disk to RAM. üß† Mnemonic: 'Frequent faults, slower results'  Other options: A) Incorrect: Page faults reduce speed. B) Incorrect: CPU is not directly overloaded. D) Incorrect: Memory allocation is not affected.
1-42cursus::02-Born2beroot2.0	008/ üíæ What is the role of swap memory? Example: RAM is full but more memory is required. A) Expands physical RAM B) Stores unused data on disk C) Increases memory allocation speed D) Prevents program crashes	Answer: B  Explanation: Swap memory stores unused data on disk, freeing RAM for active processes. üß† Mnemonic: 'Swap when RAM is a jam'  Other options: A) Incorrect: Swap complements RAM, not expands it. C) Incorrect: Swap is slower than RAM. D) Incorrect: It minimizes but doesn‚Äôt fully prevent crashes.
1-42cursus::02-Born2beroot2.0	009/ üîí How does Virtual Memory allow shared data while maintaining isolation? Example: Two programs using a shared library. A) Share physical memory for library B) Map different virtual addresses C) Use separate address spaces D) Disable security for shared data	Answer: A  Explanation: Programs share physical memory for libraries but map them to their virtual spaces, ensuring security. üß† Mnemonic: 'Shared but spared (security)'  Other options: B) Incorrect: Virtual addresses may differ but map to the same physical space. C) Incorrect: Isolation is partial for shared data. D) Incorrect: Security is not disabled for shared libraries.
1-42cursus::02-Born2beroot2.0	010/ üìú Why are page tables large in Virtual Memory? Example: Mapping 32-bit address space. A) Store mappings for every byte B) Represent RAM capacity C) Contain program execution logs D) Track shared memory usage	Answer: A  Explanation: Page tables store mappings for each byte in the virtual address space, making them large. - E.g., a 4 GB address space needs ~1 billion entries. üß† Mnemonic: 'Large maps, no gaps'  Other options: B) Incorrect: Page tables map virtual, not physical memory. C) Incorrect: They don‚Äôt log program execution. D) Incorrect: Shared memory has separate mechanisms.
